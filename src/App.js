import './App.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
import React, { useState, useEffect, useRef } from 'react';
import mqtt from 'mqtt';

const App = () => {
  const [sensorData, setSensorData] = useState({
    waterT: 0,
    airT: 0,
    airH: 0,
    soilM1: 0,
    soilM2: 0,
    light: 0,
  });

  const [deviceStates, setDeviceStates] = useState({
    lighting: false,
    ventilation: false,
    watering1: false,
    watering2: false,
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞
  const clientRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT
  useEffect(() => {
    const clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);
    const host = 'ws://broker.emqx.io:8083/mqtt';

    const options = {
      keepalive: 60,
      clientId: clientId,
      protocolId: 'MQTT',
      protocolVersion: 4,
      clean: true,
      reconnectPeriod: 1000,
      connectTimeout: 30 * 1000,
      will: {
        topic: 'WillMsg',
        payload: 'Connection Closed abnormally..!',
        qos: 0,
        retain: false,
      },
    };

    console.log('Connecting MQTT client');
    clientRef.current = mqtt.connect(host, options);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏
    clientRef.current.on('connect', () => {
      console.log('Connected to MQTT broker');

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
      clientRef.current.subscribe('base/data');  // –¢–æ–ø–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤
      clientRef.current.subscribe('base/control/#'); // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

      refreshData();
    });

    clientRef.current.on('message', (topic, message) => {
      console.log('Received message:', topic, message.toString());

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞
      if (topic === 'base/data') {
        const data = JSON.parse(message.toString());
        setSensorData({
          waterT: data.waterT,
          airT: data.airT,
          airH: data.airH,
          soilM1: data.soilM1,
          soilM2: data.soilM2,
          light: data.light,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        setDeviceStates({
          lighting: data.lState === 1,
          ventilation: data.vState === 1,
          watering1: data.wState1 === 1,
          watering2: data.wState2 === 1,
        });
      }
    });

    clientRef.current.on('error', (error) => {
      console.log('MQTT Connection Error: ', error);
      clientRef.current.end();
    });

    clientRef.current.on('reconnect', () => {
      console.log('Reconnecting...');
    });

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      clientRef.current.end();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  const toggleDevice = (device) => {
    const newState = !deviceStates[device];
    setDeviceStates((prevStates) => ({
      ...prevStates,
      [device]: newState,
    }));

    const topic = `base/control/${device}`;
    const state = newState ? 1 : 0;
    console.log(`MQTT: ${topic} -> ${state}`);

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (clientRef.current) {
      clientRef.current.publish(topic, state.toString());
    }
  };

  const refreshData = () => {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('MQTT: base/poll/request');
    if (clientRef.current) {
      clientRef.current.publish('base/poll/request', ''); // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    }
  };

  return (
    <div>
      <h1 className="header">–£–º–Ω–∞—è –¢–µ–ø–ª–∏—Ü–∞ ‚Äî –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h1>

      {/* –°–µ–∫—Ü–∏—è —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ */}
      <section id="sensors">
        <div className="section-header">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è</div>
        <button className="refresh-btn" onClick={refreshData}>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        <div className="grid-container">
          <SensorCard label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã" value={sensorData.waterT} unit="¬∞C" />
          <SensorCard label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞" value={sensorData.airT} unit="¬∞C" />
          <SensorCard label="–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞" value={sensorData.airH} unit="%" />
          <SensorCard label="–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã 1" value={sensorData.soilM1} unit="%" />
          <SensorCard label="–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã 2" value={sensorData.soilM2} unit="%" />
          <SensorCard label="–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å" value={sensorData.light} unit="%" />
        </div>
      </section>

      {/* –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <section id="controls">
        <div className="section-header">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</div>
        <div className="grid-container">
          <ControlCard
            label="–û—Å–≤–µ—â–µ–Ω–∏–µ"
            state={deviceStates.lighting}
            toggle={() => toggleDevice('lighting')}
          />
          <ControlCard
            label="–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è"
            state={deviceStates.ventilation}
            toggle={() => toggleDevice('ventilation')}
          />
          <ControlCard
            label="–ü–æ–ª–∏–≤ 1"
            state={deviceStates.watering1}
            toggle={() => toggleDevice('watering1')}
          />
          <ControlCard
            label="–ü–æ–ª–∏–≤ 2"
            state={deviceStates.watering2}
            toggle={() => toggleDevice('watering2')}
          />
        </div>
      </section>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
const SensorCard = ({ label, value, unit }) => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–∞–π–ª –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
  const getLightEmoji = (lightValue) => {
    return lightValue === 0 ? '‚òÄÔ∏è' : 'üåë';
  };

  return (
    <div className="card sensor-card">
      <div>{label}</div>
      {label === "–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å" ? (
        <div className="sensor-value">{getLightEmoji(value)}</div>
      ) : (
        <>
          <div className="sensor-value">{value} {unit}</div>
          <div className="scale" style={{ background: `linear-gradient(to right, #caf9d2, #FF5733 ${value}%, transparent ${value}%)` }}></div>
        </>
      )}
    </div>
  );
};



// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
const ControlCard = ({ label, state, toggle }) => {
  return (
    <div className="control-card">
      <div className="control-title">{label}</div>
      <label className="toggle-switch">
        <input type="checkbox" checked={state} onChange={toggle} />
        <span className="slider"></span>
      </label>
    </div>
  );
};

export default App;
